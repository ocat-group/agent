// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: grpc/proto/agent_grpc_service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BiRequestStream_RequestBiStream_FullMethodName = "/BiRequestStream/RequestBiStream"
)

// BiRequestStreamClient is the client API for BiRequestStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BiRequestStreamClient interface {
	// 请求双向流
	RequestBiStream(ctx context.Context, opts ...grpc.CallOption) (BiRequestStream_RequestBiStreamClient, error)
}

type biRequestStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewBiRequestStreamClient(cc grpc.ClientConnInterface) BiRequestStreamClient {
	return &biRequestStreamClient{cc}
}

func (c *biRequestStreamClient) RequestBiStream(ctx context.Context, opts ...grpc.CallOption) (BiRequestStream_RequestBiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &BiRequestStream_ServiceDesc.Streams[0], BiRequestStream_RequestBiStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &biRequestStreamRequestBiStreamClient{stream}
	return x, nil
}

type BiRequestStream_RequestBiStreamClient interface {
	Send(*Payload) error
	Recv() (*Payload, error)
	grpc.ClientStream
}

type biRequestStreamRequestBiStreamClient struct {
	grpc.ClientStream
}

func (x *biRequestStreamRequestBiStreamClient) Send(m *Payload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *biRequestStreamRequestBiStreamClient) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BiRequestStreamServer is the server API for BiRequestStream service.
// All implementations must embed UnimplementedBiRequestStreamServer
// for forward compatibility
type BiRequestStreamServer interface {
	// 请求双向流
	RequestBiStream(BiRequestStream_RequestBiStreamServer) error
	mustEmbedUnimplementedBiRequestStreamServer()
}

// UnimplementedBiRequestStreamServer must be embedded to have forward compatible implementations.
type UnimplementedBiRequestStreamServer struct {
}

func (UnimplementedBiRequestStreamServer) RequestBiStream(BiRequestStream_RequestBiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestBiStream not implemented")
}
func (UnimplementedBiRequestStreamServer) mustEmbedUnimplementedBiRequestStreamServer() {}

// UnsafeBiRequestStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BiRequestStreamServer will
// result in compilation errors.
type UnsafeBiRequestStreamServer interface {
	mustEmbedUnimplementedBiRequestStreamServer()
}

func RegisterBiRequestStreamServer(s grpc.ServiceRegistrar, srv BiRequestStreamServer) {
	s.RegisterService(&BiRequestStream_ServiceDesc, srv)
}

func _BiRequestStream_RequestBiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BiRequestStreamServer).RequestBiStream(&biRequestStreamRequestBiStreamServer{stream})
}

type BiRequestStream_RequestBiStreamServer interface {
	Send(*Payload) error
	Recv() (*Payload, error)
	grpc.ServerStream
}

type biRequestStreamRequestBiStreamServer struct {
	grpc.ServerStream
}

func (x *biRequestStreamRequestBiStreamServer) Send(m *Payload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *biRequestStreamRequestBiStreamServer) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BiRequestStream_ServiceDesc is the grpc.ServiceDesc for BiRequestStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BiRequestStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BiRequestStream",
	HandlerType: (*BiRequestStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RequestBiStream",
			Handler:       _BiRequestStream_RequestBiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/proto/agent_grpc_service.proto",
}
